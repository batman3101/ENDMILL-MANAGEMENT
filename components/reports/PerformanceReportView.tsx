'use client'

import { useState, useMemo } from 'react'
import { PerformanceReportData } from '../../lib/types/reports'
import { formatCurrency } from '../../lib/utils/reportCalculations'

interface PerformanceReportViewProps {
  data: PerformanceReportData
}

type SortField = 'ranking' | 'equipmentNumber' | 'model' | 'location' | 'totalChanges' | 'totalCost' | 'averageToolLife' | 'standardLifeAchievement' | 'prematureFailures' | 'efficiencyScore' | 'equipmentCount' | 'averageChanges' | 'averageCost' | 'averageLife' | 'process' | 'changeCount' | 'cost' | 'period'
type SortOrder = 'asc' | 'desc'

export default function PerformanceReportView({ data }: PerformanceReportViewProps) {
  const {
    summary,
    equipmentPerformance,
    modelComparison,
    locationComparison,
    processEfficiency,
    timeBasedAnalysis
  } = data

  // Ï†ïÎ†¨ ÏÉÅÌÉú
  const [equipmentSortField, setEquipmentSortField] = useState<SortField>('efficiencyScore')
  const [equipmentSortOrder, setEquipmentSortOrder] = useState<SortOrder>('desc')

  const [modelSortField, setModelSortField] = useState<SortField>('efficiencyScore')
  const [modelSortOrder, setModelSortOrder] = useState<SortOrder>('desc')

  const [locationSortField, setLocationSortField] = useState<SortField>('efficiencyScore')
  const [locationSortOrder, setLocationSortOrder] = useState<SortOrder>('desc')

  const [processSortField, setProcessSortField] = useState<SortField>('efficiencyScore')
  const [processSortOrder, setProcessSortOrder] = useState<SortOrder>('desc')

  const [timeSortField, setTimeSortField] = useState<SortField>('period')
  const [timeSortOrder, setTimeSortOrder] = useState<SortOrder>('asc')

  // Ï†ïÎ†¨ Ìï∏Îì§Îü¨
  const handleSort = (
    field: SortField,
    currentField: SortField,
    currentOrder: SortOrder,
    setField: (field: SortField) => void,
    setOrder: (order: SortOrder) => void
  ) => {
    if (currentField === field) {
      setOrder(currentOrder === 'asc' ? 'desc' : 'asc')
    } else {
      setField(field)
      setOrder('desc')
    }
  }

  // Ï†ïÎ†¨Îêú Îç∞Ïù¥ÌÑ∞
  const sortedEquipmentData = useMemo(() => {
    return [...equipmentPerformance].sort((a, b) => {
      const aValue = a[equipmentSortField as keyof typeof a]
      const bValue = b[equipmentSortField as keyof typeof b]
      if (aValue < bValue) return equipmentSortOrder === 'asc' ? -1 : 1
      if (aValue > bValue) return equipmentSortOrder === 'asc' ? 1 : -1
      return 0
    })
  }, [equipmentPerformance, equipmentSortField, equipmentSortOrder])

  const sortedModelData = useMemo(() => {
    return [...modelComparison].sort((a, b) => {
      const aValue = a[modelSortField as keyof typeof a]
      const bValue = b[modelSortField as keyof typeof b]
      if (aValue < bValue) return modelSortOrder === 'asc' ? -1 : 1
      if (aValue > bValue) return modelSortOrder === 'asc' ? 1 : -1
      return 0
    })
  }, [modelComparison, modelSortField, modelSortOrder])

  const sortedLocationData = useMemo(() => {
    return [...locationComparison].sort((a, b) => {
      const aValue = a[locationSortField as keyof typeof a]
      const bValue = b[locationSortField as keyof typeof b]
      if (aValue < bValue) return locationSortOrder === 'asc' ? -1 : 1
      if (aValue > bValue) return locationSortOrder === 'asc' ? 1 : -1
      return 0
    })
  }, [locationComparison, locationSortField, locationSortOrder])

  const sortedProcessData = useMemo(() => {
    return [...processEfficiency].sort((a, b) => {
      const aValue = a[processSortField as keyof typeof a]
      const bValue = b[processSortField as keyof typeof b]
      if (aValue < bValue) return processSortOrder === 'asc' ? -1 : 1
      if (aValue > bValue) return processSortOrder === 'asc' ? 1 : -1
      return 0
    })
  }, [processEfficiency, processSortField, processSortOrder])

  const sortedTimeData = useMemo(() => {
    return [...timeBasedAnalysis].sort((a, b) => {
      const aValue = a[timeSortField as keyof typeof a]
      const bValue = b[timeSortField as keyof typeof b]
      if (aValue < bValue) return timeSortOrder === 'asc' ? -1 : 1
      if (aValue > bValue) return timeSortOrder === 'asc' ? 1 : -1
      return 0
    })
  }, [timeBasedAnalysis, timeSortField, timeSortOrder])

  // Ï†ïÎ†¨ ÏïÑÏù¥ÏΩò ÌëúÏãú
  const SortIcon = ({ field, currentField, currentOrder }: { field: SortField; currentField: SortField; currentOrder: SortOrder }) => (
    <span className="ml-1">
      {currentField === field && (currentOrder === 'asc' ? '‚Üë' : '‚Üì')}
    </span>
  )

  // Ìö®Ïú®ÏÑ± Ï†êÏàò ÏÉâÏÉÅ
  const getEfficiencyColor = (score: number) => {
    if (score >= 90) return 'text-green-600 bg-green-100'
    if (score >= 80) return 'text-blue-600 bg-blue-100'
    if (score >= 70) return 'text-yellow-600 bg-yellow-100'
    if (score >= 60) return 'text-orange-600 bg-orange-100'
    return 'text-red-600 bg-red-100'
  }

  // Îû≠ÌÇπ Î∞∞ÏßÄ ÏÉâÏÉÅ
  const getRankingColor = (ranking: number) => {
    if (ranking === 1) return 'bg-yellow-500 text-white'
    if (ranking === 2) return 'bg-gray-400 text-white'
    if (ranking === 3) return 'bg-amber-600 text-white'
    return 'bg-gray-200 text-gray-700'
  }

  return (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-6 border border-blue-200">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-blue-800">Ï¥ù ÏÑ§ÎπÑ Ïàò</span>
            <span className="text-2xl">üè≠</span>
          </div>
          <div className="text-3xl font-bold text-blue-900">
            {summary.totalEquipment}ÎåÄ
          </div>
          <div className="text-sm text-blue-700 mt-1">
            ÏÑ§ÎπÑÎãπ ÌèâÍ∑† {summary.averageChangesPerEquipment}Í±¥ ÍµêÏ≤¥
          </div>
        </div>

        <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-6 border border-green-200">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-green-800">Ï†ÑÏ≤¥ Ìö®Ïú®ÏÑ±</span>
            <span className="text-2xl">üìä</span>
          </div>
          <div className="text-3xl font-bold text-green-900">
            {summary.overallEfficiency.toFixed(1)}%
          </div>
          <div className="text-sm text-green-700 mt-1">
            ÌèâÍ∑† ÌëúÏ§Ä ÏàòÎ™Ö Îã¨ÏÑ±Î•†
          </div>
        </div>

        <div className="bg-white rounded-xl p-6 border border-gray-200">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">ÏµúÍ≥† ÏÑ±Îä•</span>
            <span className="text-2xl">üèÜ</span>
          </div>
          <div className="text-lg font-bold text-gray-900 mt-1">
            {summary.topPerformer}
          </div>
          <div className="text-xs text-gray-500 mt-2">
            Top Performer
          </div>
        </div>

        <div className="bg-white rounded-xl p-6 border border-gray-200">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">ÏµúÏ†Ä ÏÑ±Îä•</span>
            <span className="text-2xl">‚ö†Ô∏è</span>
          </div>
          <div className="text-lg font-bold text-gray-900 mt-1">
            {summary.worstPerformer}
          </div>
          <div className="text-xs text-gray-500 mt-2">
            Needs Improvement
          </div>
        </div>
      </div>

      {/* ÏÑ§ÎπÑÎ≥Ñ ÏÑ±Îä• Î∂ÑÏÑù */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
        <div className="px-6 py-4 border-b bg-gray-50">
          <h3 className="text-lg font-semibold text-gray-900">ÏÑ§ÎπÑÎ≥Ñ ÏÑ±Îä• Î∂ÑÏÑù</h3>
          <p className="text-sm text-gray-600 mt-1">Ìö®Ïú®ÏÑ± Ï†êÏàò Í∏∞Ï§Ä Ï†ïÎ†¨</p>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('ranking', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    ÏàúÏúÑ
                    <SortIcon field="ranking" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('equipmentNumber', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    ÏÑ§ÎπÑ
                    <SortIcon field="equipmentNumber" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('model', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    Î™®Îç∏
                    <SortIcon field="model" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('location', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    ÏúÑÏπò
                    <SortIcon field="location" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('totalChanges', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    ÍµêÏ≤¥ Í±¥Ïàò
                    <SortIcon field="totalChanges" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('totalCost', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    Ï¥ù ÎπÑÏö©
                    <SortIcon field="totalCost" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('averageToolLife', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    ÌèâÍ∑† ÏàòÎ™Ö
                    <SortIcon field="averageToolLife" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('standardLifeAchievement', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    ÏàòÎ™Ö Îã¨ÏÑ±Î•†
                    <SortIcon field="standardLifeAchievement" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('prematureFailures', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    Ï°∞Í∏∞ ÌååÏÜê
                    <SortIcon field="prematureFailures" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('efficiencyScore', equipmentSortField, equipmentSortOrder, setEquipmentSortField, setEquipmentSortOrder)}
                >
                  <div className="flex items-center">
                    Ìö®Ïú®ÏÑ±
                    <SortIcon field="efficiencyScore" currentField={equipmentSortField} currentOrder={equipmentSortOrder} />
                  </div>
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {sortedEquipmentData.map((item, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center justify-center w-8 h-8 rounded-full text-xs font-bold ${getRankingColor(item.ranking)}`}>
                      {item.ranking}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {item.equipmentNumber}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {item.model}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {item.location}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {item.totalChanges}Í±¥
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {formatCurrency(item.totalCost)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {item.averageToolLife.toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {item.standardLifeAchievement.toFixed(1)}%
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {item.prematureFailures > 0 ? (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                        {item.prematureFailures}Í±¥
                      </span>
                    ) : (
                      <span className="text-sm text-gray-400">-</span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getEfficiencyColor(item.efficiencyScore)}`}>
                      {item.efficiencyScore}Ï†ê
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Î™®Îç∏Î≥Ñ & ÏúÑÏπòÎ≥Ñ ÎπÑÍµê */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Î™®Îç∏Î≥Ñ ÎπÑÍµê */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
          <div className="px-6 py-4 border-b bg-gray-50">
            <h3 className="text-lg font-semibold text-gray-900">Î™®Îç∏Î≥Ñ ÎπÑÍµê</h3>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                    onClick={() => handleSort('model', modelSortField, modelSortOrder, setModelSortField, setModelSortOrder)}
                  >
                    <div className="flex items-center">
                      Î™®Îç∏
                      <SortIcon field="model" currentField={modelSortField} currentOrder={modelSortOrder} />
                    </div>
                  </th>
                  <th
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                    onClick={() => handleSort('equipmentCount', modelSortField, modelSortOrder, setModelSortField, setModelSortOrder)}
                  >
                    <div className="flex items-center justify-end">
                      ÏÑ§ÎπÑ Ïàò
                      <SortIcon field="equipmentCount" currentField={modelSortField} currentOrder={modelSortOrder} />
                    </div>
                  </th>
                  <th
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                    onClick={() => handleSort('averageChanges', modelSortField, modelSortOrder, setModelSortField, setModelSortOrder)}
                  >
                    <div className="flex items-center justify-end">
                      ÌèâÍ∑† ÍµêÏ≤¥
                      <SortIcon field="averageChanges" currentField={modelSortField} currentOrder={modelSortOrder} />
                    </div>
                  </th>
                  <th
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                    onClick={() => handleSort('efficiencyScore', modelSortField, modelSortOrder, setModelSortField, setModelSortOrder)}
                  >
                    <div className="flex items-center justify-end">
                      Ìö®Ïú®ÏÑ±
                      <SortIcon field="efficiencyScore" currentField={modelSortField} currentOrder={modelSortOrder} />
                    </div>
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {sortedModelData.map((item, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {item.model}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-500">
                      {item.equipmentCount}ÎåÄ
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                      {item.averageChanges}Í±¥
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getEfficiencyColor(item.efficiencyScore)}`}>
                        {item.efficiencyScore}Ï†ê
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* ÏúÑÏπòÎ≥Ñ ÎπÑÍµê */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
          <div className="px-6 py-4 border-b bg-gray-50">
            <h3 className="text-lg font-semibold text-gray-900">ÏúÑÏπòÎ≥Ñ ÎπÑÍµê</h3>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                    onClick={() => handleSort('location', locationSortField, locationSortOrder, setLocationSortField, setLocationSortOrder)}
                  >
                    <div className="flex items-center">
                      ÏúÑÏπò
                      <SortIcon field="location" currentField={locationSortField} currentOrder={locationSortOrder} />
                    </div>
                  </th>
                  <th
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                    onClick={() => handleSort('equipmentCount', locationSortField, locationSortOrder, setLocationSortField, setLocationSortOrder)}
                  >
                    <div className="flex items-center justify-end">
                      ÏÑ§ÎπÑ Ïàò
                      <SortIcon field="equipmentCount" currentField={locationSortField} currentOrder={locationSortOrder} />
                    </div>
                  </th>
                  <th
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                    onClick={() => handleSort('totalChanges', locationSortField, locationSortOrder, setLocationSortField, setLocationSortOrder)}
                  >
                    <div className="flex items-center justify-end">
                      Ï¥ù ÍµêÏ≤¥
                      <SortIcon field="totalChanges" currentField={locationSortField} currentOrder={locationSortOrder} />
                    </div>
                  </th>
                  <th
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                    onClick={() => handleSort('efficiencyScore', locationSortField, locationSortOrder, setLocationSortField, setLocationSortOrder)}
                  >
                    <div className="flex items-center justify-end">
                      Ìö®Ïú®ÏÑ±
                      <SortIcon field="efficiencyScore" currentField={locationSortField} currentOrder={locationSortOrder} />
                    </div>
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {sortedLocationData.map((item, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {item.location}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-500">
                      {item.equipmentCount}ÎåÄ
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                      {item.totalChanges}Í±¥
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getEfficiencyColor(item.efficiencyScore)}`}>
                        {item.efficiencyScore}Ï†ê
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* Í≥µÏ†ïÎ≥Ñ Ìö®Ïú®ÏÑ± */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
        <div className="px-6 py-4 border-b bg-gray-50">
          <h3 className="text-lg font-semibold text-gray-900">Í≥µÏ†ïÎ≥Ñ Ìö®Ïú®ÏÑ± Î∂ÑÏÑù</h3>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('process', processSortField, processSortOrder, setProcessSortField, setProcessSortOrder)}
                >
                  <div className="flex items-center">
                    Í≥µÏ†ï
                    <SortIcon field="process" currentField={processSortField} currentOrder={processSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('changeCount', processSortField, processSortOrder, setProcessSortField, setProcessSortOrder)}
                >
                  <div className="flex items-center">
                    ÍµêÏ≤¥ Í±¥Ïàò
                    <SortIcon field="changeCount" currentField={processSortField} currentOrder={processSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('averageLife', processSortField, processSortOrder, setProcessSortField, setProcessSortOrder)}
                >
                  <div className="flex items-center">
                    ÌèâÍ∑† ÏàòÎ™Ö
                    <SortIcon field="averageLife" currentField={processSortField} currentOrder={processSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('cost', processSortField, processSortOrder, setProcessSortField, setProcessSortOrder)}
                >
                  <div className="flex items-center">
                    ÎπÑÏö©
                    <SortIcon field="cost" currentField={processSortField} currentOrder={processSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('efficiencyScore', processSortField, processSortOrder, setProcessSortField, setProcessSortOrder)}
                >
                  <div className="flex items-center">
                    Ìö®Ïú®ÏÑ± Ï†êÏàò
                    <SortIcon field="efficiencyScore" currentField={processSortField} currentOrder={processSortOrder} />
                  </div>
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {sortedProcessData.map((item, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {item.process}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {item.changeCount}Í±¥
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {item.averageLife.toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {formatCurrency(item.cost)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getEfficiencyColor(item.efficiencyScore)}`}>
                      {item.efficiencyScore}Ï†ê
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* ÏãúÍ∞ÑÎ≥Ñ Î∂ÑÏÑù */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
        <div className="px-6 py-4 border-b bg-gray-50">
          <h3 className="text-lg font-semibold text-gray-900">ÏãúÍ∞ÑÎ≥Ñ ÏÑ±Îä• Ï∂îÏù¥</h3>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('period', timeSortField, timeSortOrder, setTimeSortField, setTimeSortOrder)}
                >
                  <div className="flex items-center">
                    Í∏∞Í∞Ñ
                    <SortIcon field="period" currentField={timeSortField} currentOrder={timeSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('changeCount', timeSortField, timeSortOrder, setTimeSortField, setTimeSortOrder)}
                >
                  <div className="flex items-center justify-end">
                    ÍµêÏ≤¥ Í±¥Ïàò
                    <SortIcon field="changeCount" currentField={timeSortField} currentOrder={timeSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('cost', timeSortField, timeSortOrder, setTimeSortField, setTimeSortOrder)}
                >
                  <div className="flex items-center justify-end">
                    ÎπÑÏö©
                    <SortIcon field="cost" currentField={timeSortField} currentOrder={timeSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('averageLife', timeSortField, timeSortOrder, setTimeSortField, setTimeSortOrder)}
                >
                  <div className="flex items-center justify-end">
                    ÌèâÍ∑† ÏàòÎ™Ö
                    <SortIcon field="averageLife" currentField={timeSortField} currentOrder={timeSortOrder} />
                  </div>
                </th>
                <th
                  className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase cursor-pointer hover:bg-gray-100"
                  onClick={() => handleSort('efficiencyScore', timeSortField, timeSortOrder, setTimeSortField, setTimeSortOrder)}
                >
                  <div className="flex items-center justify-end">
                    Ìö®Ïú®ÏÑ± Ï†êÏàò
                    <SortIcon field="efficiencyScore" currentField={timeSortField} currentOrder={timeSortOrder} />
                  </div>
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {sortedTimeData.map((item, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {item.period}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-500">
                    {item.changeCount}Í±¥
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                    {formatCurrency(item.cost)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                    {item.averageLife.toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${getEfficiencyColor(item.efficiencyScore)}`}>
                      {item.efficiencyScore}Ï†ê
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠ */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
        <div className="flex">
          <div className="flex-shrink-0">
            <span className="text-blue-400 text-2xl">üí°</span>
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-blue-800">ÏÑ±Îä• Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠</h3>
            <div className="mt-2 text-sm text-blue-700">
              <ul className="list-disc list-inside space-y-1">
                {summary.overallEfficiency < 70 && (
                  <li>Ï†ÑÏ≤¥ Ìö®Ïú®ÏÑ±Ïù¥ {summary.overallEfficiency.toFixed(1)}%Î°ú ÎÇÆÏäµÎãàÎã§. Ï†ÑÎ∞òÏ†ÅÏù∏ Í≥µÍµ¨ Í¥ÄÎ¶¨ ÌîÑÎ°úÏÑ∏Ïä§Î•º Í∞úÏÑ†ÌïòÏÑ∏Ïöî.</li>
                )}
                {equipmentPerformance.length > 0 && equipmentPerformance[equipmentPerformance.length - 1].efficiencyScore < 60 && (
                  <li>ÏùºÎ∂Ä ÏÑ§ÎπÑÏùò ÏÑ±Îä•Ïù¥ Îß§Ïö∞ Ï†ÄÏ°∞Ìï©ÎãàÎã§. Ìï¥Îãπ ÏÑ§ÎπÑÏùò Í∞ÄÎèô Ï°∞Í±¥ Î∞è Í≥µÍµ¨ ÏÑ†ÌÉùÏùÑ Ïû¨Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî.</li>
                )}
                {equipmentPerformance.some(e => e.prematureFailures > 0) && (
                  <li>Ï°∞Í∏∞ ÌååÏÜêÏù¥ Î∞úÏÉùÌïú ÏÑ§ÎπÑÍ∞Ä ÏûàÏäµÎãàÎã§. Í∞ÄÍ≥µ Ï°∞Í±¥Í≥º Í≥µÍµ¨ ÌíàÏßàÏùÑ Ï†êÍ≤ÄÌïòÏÑ∏Ïöî.</li>
                )}
                {modelComparison.length > 1 && (
                  <li>Î™®Îç∏Î≥Ñ ÏÑ±Îä• Ï∞®Ïù¥Í∞Ä ÏûàÏäµÎãàÎã§. ÏµúÍ≥† ÏÑ±Îä• Î™®Îç∏Ïùò Í¥ÄÎ¶¨ Î∞©Î≤ïÏùÑ Îã§Î•∏ Î™®Îç∏ÏóêÎèÑ Ï†ÅÏö©ÌïòÏÑ∏Ïöî.</li>
                )}
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
